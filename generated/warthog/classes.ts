// This file has been auto-generated by Warthog.  Do not update directly as it
// will be re-written.  If you need to change this file, update models or add
// new TypeGraphQL objects
// prettier-ignore
// @ts-ignore
import { DateResolver as Date } from 'graphql-scalars';
// prettier-ignore
// @ts-ignore
import { GraphQLID as ID } from 'graphql';
// prettier-ignore
// @ts-ignore
import { ArgsType, Field as TypeGraphQLField, Float, InputType as TypeGraphQLInputType, Int } from 'type-graphql';
// prettier-ignore
// @ts-ignore
import { registerEnumType, GraphQLISODateTime as DateTime } from "type-graphql";

import * as BN from "bn.js";

// prettier-ignore
// @ts-ignore eslint-disable-next-line @typescript-eslint/no-var-requires
const { GraphQLJSONObject } = require('graphql-type-json');
// prettier-ignore
// @ts-ignore
import { BaseWhereInput, JsonObject, PaginationArgs, DateOnlyString, DateTimeString, BigInt, Bytes } from '@subsquid/warthog';

// @ts-ignore
import { TokenBurn } from "../modules/token-burn/token-burn.model";
// @ts-ignore
import { TokenMint } from "../modules/token-mint/token-mint.model";

export enum TokenBurnOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  account_ASC = "account_ASC",
  account_DESC = "account_DESC",

  amount_ASC = "amount_ASC",
  amount_DESC = "amount_DESC",

  timestamp_ASC = "timestamp_ASC",
  timestamp_DESC = "timestamp_DESC",
}

registerEnumType(TokenBurnOrderByEnum, {
  name: "TokenBurnOrderByInput",
});

@TypeGraphQLInputType()
export class TokenBurnWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  account_eq?: string;

  @TypeGraphQLField({ nullable: true })
  account_contains?: string;

  @TypeGraphQLField({ nullable: true })
  account_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  account_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  account_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amount_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amount_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amount_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amount_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amount_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  amount_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  timestamp_in?: string[];

  @TypeGraphQLField(() => TokenBurnWhereInput, { nullable: true })
  AND?: [TokenBurnWhereInput];

  @TypeGraphQLField(() => TokenBurnWhereInput, { nullable: true })
  OR?: [TokenBurnWhereInput];
}

@TypeGraphQLInputType()
export class TokenBurnWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class TokenBurnCreateInput {
  @TypeGraphQLField()
  account!: string;

  @TypeGraphQLField()
  amount!: string;

  @TypeGraphQLField()
  timestamp!: string;
}

@TypeGraphQLInputType()
export class TokenBurnUpdateInput {
  @TypeGraphQLField({ nullable: true })
  account?: string;

  @TypeGraphQLField({ nullable: true })
  amount?: string;

  @TypeGraphQLField({ nullable: true })
  timestamp?: string;
}

@ArgsType()
export class TokenBurnWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => TokenBurnWhereInput, { nullable: true })
  where?: TokenBurnWhereInput;

  @TypeGraphQLField(() => TokenBurnOrderByEnum, { nullable: true })
  orderBy?: TokenBurnOrderByEnum[];
}

@ArgsType()
export class TokenBurnCreateManyArgs {
  @TypeGraphQLField(() => [TokenBurnCreateInput])
  data!: TokenBurnCreateInput[];
}

@ArgsType()
export class TokenBurnUpdateArgs {
  @TypeGraphQLField() data!: TokenBurnUpdateInput;
  @TypeGraphQLField() where!: TokenBurnWhereUniqueInput;
}

export enum TokenMintOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  account_ASC = "account_ASC",
  account_DESC = "account_DESC",

  amount_ASC = "amount_ASC",
  amount_DESC = "amount_DESC",

  timestamp_ASC = "timestamp_ASC",
  timestamp_DESC = "timestamp_DESC",
}

registerEnumType(TokenMintOrderByEnum, {
  name: "TokenMintOrderByInput",
});

@TypeGraphQLInputType()
export class TokenMintWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  account_eq?: string;

  @TypeGraphQLField({ nullable: true })
  account_contains?: string;

  @TypeGraphQLField({ nullable: true })
  account_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  account_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  account_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amount_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amount_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amount_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amount_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amount_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  amount_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  timestamp_in?: string[];

  @TypeGraphQLField(() => TokenMintWhereInput, { nullable: true })
  AND?: [TokenMintWhereInput];

  @TypeGraphQLField(() => TokenMintWhereInput, { nullable: true })
  OR?: [TokenMintWhereInput];
}

@TypeGraphQLInputType()
export class TokenMintWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class TokenMintCreateInput {
  @TypeGraphQLField()
  account!: string;

  @TypeGraphQLField()
  amount!: string;

  @TypeGraphQLField()
  timestamp!: string;
}

@TypeGraphQLInputType()
export class TokenMintUpdateInput {
  @TypeGraphQLField({ nullable: true })
  account?: string;

  @TypeGraphQLField({ nullable: true })
  amount?: string;

  @TypeGraphQLField({ nullable: true })
  timestamp?: string;
}

@ArgsType()
export class TokenMintWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => TokenMintWhereInput, { nullable: true })
  where?: TokenMintWhereInput;

  @TypeGraphQLField(() => TokenMintOrderByEnum, { nullable: true })
  orderBy?: TokenMintOrderByEnum[];
}

@ArgsType()
export class TokenMintCreateManyArgs {
  @TypeGraphQLField(() => [TokenMintCreateInput])
  data!: TokenMintCreateInput[];
}

@ArgsType()
export class TokenMintUpdateArgs {
  @TypeGraphQLField() data!: TokenMintUpdateInput;
  @TypeGraphQLField() where!: TokenMintWhereUniqueInput;
}
