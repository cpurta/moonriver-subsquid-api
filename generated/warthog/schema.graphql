interface BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
}

type BaseModel implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
}

type BaseModelUUID implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
}

input BaseWhereInput {
  id_eq: String
  id_in: [String!]
  createdAt_eq: String
  createdAt_lt: String
  createdAt_lte: String
  createdAt_gt: String
  createdAt_gte: String
  createdById_eq: String
  updatedAt_eq: String
  updatedAt_lt: String
  updatedAt_lte: String
  updatedAt_gt: String
  updatedAt_gte: String
  updatedById_eq: String
  deletedAt_all: Boolean
  deletedAt_eq: String
  deletedAt_lt: String
  deletedAt_lte: String
  deletedAt_gt: String
  deletedAt_gte: String
  deletedById_eq: String
}

"""GraphQL representation of BigInt"""
scalar BigInt

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

interface DeleteResponse {
  id: ID!
}

type Hello {
  greeting: String!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type ProcessorState {
  lastCompleteBlock: Float!
  lastProcessedEvent: String!
  indexerHead: Float!
  chainHead: Float!
}

type Query {
  tokenBurns(offset: Int, limit: Int = 50, where: TokenBurnWhereInput, orderBy: [TokenBurnOrderByInput!]): [TokenBurn!]!
  tokenBurnByUniqueInput(where: TokenBurnWhereUniqueInput!): TokenBurn
  tokenBurnsConnection(first: Int, after: String, last: Int, before: String, where: TokenBurnWhereInput, orderBy: [TokenBurnOrderByInput!]): TokenBurnConnection!
  tokenMints(offset: Int, limit: Int = 50, where: TokenMintWhereInput, orderBy: [TokenMintOrderByInput!]): [TokenMint!]!
  tokenMintByUniqueInput(where: TokenMintWhereUniqueInput!): TokenMint
  tokenMintsConnection(first: Int, after: String, last: Int, before: String, where: TokenMintWhereInput, orderBy: [TokenMintOrderByInput!]): TokenMintConnection!
  hello: Hello!
}

type StandardDeleteResponse {
  id: ID!
}

type Subscription {
  stateSubscription: ProcessorState!
}

type TokenBurn implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  account: String!
  amount: BigInt!
  timestamp: BigInt!
}

type TokenBurnConnection {
  totalCount: Int!
  edges: [TokenBurnEdge!]!
  pageInfo: PageInfo!
}

input TokenBurnCreateInput {
  account: String!
  amount: String!
  timestamp: String!
}

type TokenBurnEdge {
  node: TokenBurn!
  cursor: String!
}

enum TokenBurnOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  account_ASC
  account_DESC
  amount_ASC
  amount_DESC
  timestamp_ASC
  timestamp_DESC
}

input TokenBurnUpdateInput {
  account: String
  amount: String
  timestamp: String
}

input TokenBurnWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  account_eq: String
  account_contains: String
  account_startsWith: String
  account_endsWith: String
  account_in: [String!]
  amount_eq: BigInt
  amount_gt: BigInt
  amount_gte: BigInt
  amount_lt: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  timestamp_eq: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  AND: [TokenBurnWhereInput!]
  OR: [TokenBurnWhereInput!]
}

input TokenBurnWhereUniqueInput {
  id: ID!
}

type TokenMint implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  account: String!
  amount: BigInt!
  timestamp: BigInt!
}

type TokenMintConnection {
  totalCount: Int!
  edges: [TokenMintEdge!]!
  pageInfo: PageInfo!
}

input TokenMintCreateInput {
  account: String!
  amount: String!
  timestamp: String!
}

type TokenMintEdge {
  node: TokenMint!
  cursor: String!
}

enum TokenMintOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  account_ASC
  account_DESC
  amount_ASC
  amount_DESC
  timestamp_ASC
  timestamp_DESC
}

input TokenMintUpdateInput {
  account: String
  amount: String
  timestamp: String
}

input TokenMintWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  account_eq: String
  account_contains: String
  account_startsWith: String
  account_endsWith: String
  account_in: [String!]
  amount_eq: BigInt
  amount_gt: BigInt
  amount_gte: BigInt
  amount_lt: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  timestamp_eq: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  AND: [TokenMintWhereInput!]
  OR: [TokenMintWhereInput!]
}

input TokenMintWhereUniqueInput {
  id: ID!
}
